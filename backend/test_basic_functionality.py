#!/usr/bin/env python3
"""
Script de teste b√°sico para validar funcionalidades do iLyra
"""

import os
import sys
import json
import requests
import google.generativeai as genai
from datetime import datetime

# Configurar API do Gemini
GEMINI_API_KEY = 'AIzaSyDyC0ga1UvSpn9wHwZhhW3fUs4KG835ZLg'
genai.configure(api_key=GEMINI_API_KEY)

def test_gemini_integration():
    """Testar integra√ß√£o com Google Gemini"""
    print("üß™ TESTANDO INTEGRA√á√ÉO GEMINI...")
    try:
        model = genai.GenerativeModel('gemini-2.5-flash')
        
        # Teste b√°sico
        response = model.generate_content('Responda apenas "OK" se voc√™ est√° funcionando.')
        print(f"‚úÖ Teste b√°sico: {response.text}")
        
        # Teste espiritual
        spiritual_prompt = """Como um guia espiritual experiente, explique brevemente (m√°ximo 100 palavras) 
        o que s√£o chakras e sua import√¢ncia no desenvolvimento espiritual."""
        
        spiritual_response = model.generate_content(spiritual_prompt)
        print(f"‚úÖ Teste espiritual: {spiritual_response.text[:100]}...")
        
        # Teste de m√©tricas
        metrics_prompt = """Baseado na seguinte conversa de um usu√°rio: 'Hoje meditei por 30 minutos e me senti muito em paz', 
        sugira atualiza√ß√µes para as seguintes m√©tricas espirituais (responda apenas com n√∫meros de 1-10):
        - Medita√ß√£o Di√°ria: 
        - Paz Interior: 
        - Energia Vital:"""
        
        metrics_response = model.generate_content(metrics_prompt)
        print(f"‚úÖ Teste de m√©tricas: {metrics_response.text[:100]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na integra√ß√£o Gemini: {e}")
        return False

def test_database_models():
    """Testar modelos do banco de dados"""
    print("\nüóÑÔ∏è TESTANDO MODELOS DO BANCO...")
    try:
        # Importar modelos
        sys.path.append('/home/ubuntu/ilyra_project/ilyra-platform/backend')
        from models import User, Plan, SpiritualMetric, AIConversation
        
        print("‚úÖ Modelos importados com sucesso")
        
        # Verificar estrutura dos modelos
        user_attrs = [attr for attr in dir(User) if not attr.startswith('_')]
        print(f"‚úÖ Modelo User tem {len(user_attrs)} atributos")
        
        plan_attrs = [attr for attr in dir(Plan) if not attr.startswith('_')]
        print(f"‚úÖ Modelo Plan tem {len(plan_attrs)} atributos")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro nos modelos: {e}")
        return False

def test_spiritual_metrics():
    """Testar sistema de m√©tricas espirituais"""
    print("\nüîÆ TESTANDO M√âTRICAS ESPIRITUAIS...")
    
    # M√©tricas b√°sicas definidas
    basic_metrics = [
        "Medita√ß√£o Di√°ria",
        "N√≠vel de Consci√™ncia", 
        "Energia Vital",
        "Equil√≠brio dos Chakras",
        "Paz Interior",
        "Conex√£o Espiritual",
        "Intui√ß√£o e Clarivid√™ncia",
        "Prop√≥sito de Vida"
    ]
    
    print(f"‚úÖ {len(basic_metrics)} m√©tricas b√°sicas definidas")
    
    # Simular c√°lculo de m√©tricas
    sample_metrics = {}
    for metric in basic_metrics:
        # Simular valor entre 1-10
        import random
        sample_metrics[metric] = random.randint(1, 10)
    
    print(f"‚úÖ M√©tricas simuladas: {json.dumps(sample_metrics, indent=2)}")
    
    return True

def test_ai_conversation_flow():
    """Testar fluxo de conversa com IA"""
    print("\nüí¨ TESTANDO FLUXO DE CONVERSA IA...")
    
    try:
        model = genai.GenerativeModel('gemini-2.5-flash')
        
        # Simular conversa
        user_messages = [
            "Ol√°, preciso de orienta√ß√£o espiritual",
            "Como posso melhorar minha medita√ß√£o?",
            "Sinto que meus chakras est√£o desalinhados"
        ]
        
        conversation_history = []
        
        for msg in user_messages:
            # Gerar resposta
            response = model.generate_content(f"Como guia espiritual, responda: {msg}")
            
            conversation_history.append({
                "user": msg,
                "ai": response.text[:100] + "...",
                "timestamp": datetime.now().isoformat()
            })
            
            print(f"‚úÖ Conversa {len(conversation_history)}: {msg[:30]}...")
        
        print(f"‚úÖ {len(conversation_history)} conversas processadas")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no fluxo de conversa: {e}")
        return False

def test_dashboard_integration():
    """Testar integra√ß√£o do dashboard"""
    print("\nüìä TESTANDO INTEGRA√á√ÉO DO DASHBOARD...")
    
    # Simular dados do dashboard
    dashboard_data = {
        "user_stats": {
            "total_conversations": 15,
            "meditation_streak": 7,
            "spiritual_level": 8.5
        },
        "metrics_summary": {
            "highest_metric": "Paz Interior (9/10)",
            "lowest_metric": "Chakra Raiz (4/10)",
            "average_score": 7.2
        },
        "ai_insights": [
            "Sua pr√°tica de medita√ß√£o est√° consistente",
            "Considere trabalhar o chakra raiz",
            "Excelente progresso na paz interior"
        ]
    }
    
    print(f"‚úÖ Dashboard data: {json.dumps(dashboard_data, indent=2)}")
    
    return True

def main():
    """Executar todos os testes"""
    print("üöÄ INICIANDO TESTES DO PROJETO ILYRA")
    print("=" * 50)
    
    tests = [
        ("Integra√ß√£o Gemini", test_gemini_integration),
        ("Modelos do Banco", test_database_models),
        ("M√©tricas Espirituais", test_spiritual_metrics),
        ("Fluxo de Conversa IA", test_ai_conversation_flow),
        ("Integra√ß√£o Dashboard", test_dashboard_integration)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå Erro no teste {test_name}: {e}")
            results[test_name] = False
    
    # Resumo dos resultados
    print("\n" + "=" * 50)
    print("üìã RESUMO DOS TESTES")
    print("=" * 50)
    
    passed = sum(1 for result in results.values() if result)
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name}: {status}")
    
    print(f"\nüéØ RESULTADO FINAL: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ TODOS OS TESTES PASSARAM! Sistema funcionando corretamente.")
    else:
        print("‚ö†Ô∏è Alguns testes falharam. Verificar implementa√ß√£o.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
